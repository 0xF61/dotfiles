" Some shitty vimrc file

" Defaults are for losers
let skip_defaults_vim=1
set nocompatible

" Better integration with clipboard & enable mouse support
set clipboard=unnamedplus mouse+=a

" User termguicolors for truecolor
" faster scrolling
colorscheme minimalist
set background=dark
set ttyfast

" activate line numbers
" disable relative line numbers, remove no to sample it
set number norelativenumber

" turn info in tray on even if default
set ruler nowrap

" use cursorline for realization
autocmd InsertEnter,InsertLeave * set cul!

" Set a visual finisline to stop writing
set colorcolumn=72

" spaces are evil
" https://www.reddit.com/r/javascript/comments/c8drjo/nobody_talks_about_the_real_reason_to_use_tabs/
set noexpandtab tabstop=2 softtabstop=2 shiftwidth=2

" Enable smart stuff
set smartindent smarttab autoindent smartcase ignorecase

" easier to see characters when `set paste` is on
set list listchars=tab:→\ ,eol:↲,nbsp:␣,trail:·,extends:⟩,precedes:⟨

" don't restrict my line length
set textwidth=0

" more risky, but cleaner
set nobackup noswapfile nowritebackup nomodeline

" Backups are good but keep them until next shutdown
if !isdirectory($XDG_RUNTIME_DIR."/vim")
	call mkdir($XDG_RUNTIME_DIR."/vim", "", 0700)
endif
set undofile undolevels=1000 undodir=$XDG_RUNTIME_DIR/vim

" keep the terminal title updated
set laststatus=2 icon

" center the cursor always on the screen
set scrolloff=999 sidescrolloff=10 cursorline

" highlight search hits, \+<cr> to clear
set hlsearch incsearch linebreak
map <silent> <leader><cr> :noh<cr>

" Update Leader for \ key combos
map <Space> <Leader>

" Change working directory
map <Leader>. :lcd %:p:h <CR>

" Keep selected in Visual mode
vnoremap < <gv
vnoremap > >gv

" No need file managers and line search
nnoremap <silent> <C-p> :Files<CR>
nnoremap <silent> <C-o> :Lines<CR>

" avoid most of the 'Hit Enter ...' messages
set shortmess=aoOtI

" prevents truncated yanks, deletes, etc.
set viminfo=

" not a fan of bracket matching or folding
let g:loaded_matchparen=1
set noshowmatch foldmethod=manual

" stop complaints about switching buffer with changes
set hidden

" command history
set history=100

" here because plugins and stuff need it
syntax enable

" allow sensing the filetype
filetype plugin on

" Install vim-plug if not already installed
if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall
endif

" only load plugins if Plug detected
if filereadable(expand("~/.vim/autoload/plug.vim"))
	call plug#begin('~/.vim/vimplugins')
		Plug 'airblade/vim-gitgutter', { 'branch':'main' }
		Plug 'fatih/vim-go', {'do':':GoUpdateBinaries'}
		Plug 'itchyny/lightline.vim'
		Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
		Plug 'junegunn/fzf.vim'
		Plug 'neoclide/coc.nvim', {'branch':'release'}
		Plug 'preservim/nerdcommenter'
		Plug 'preservim/nerdtree'
		Plug 'tpope/vim-fugitive', {'branch':'master'}
		Plug 'kristijanhusak/vim-dadbod-ui'
		Plug 'tpope/vim-dadbod'
		Plug 'tpope/vim-surround'
		Plug 'vimwiki/vimwiki'
	call plug#end()

	let g:coc_global_extensions = [
		\ 'coc-go',
		\ 'coc-highlight',
		\ 'coc-json',
		\ 'coc-marketplace',
		\ 'coc-pairs',
		\ 'coc-prettier',
		\ 'coc-pyright',
		\ 'coc-snippets',
		\ ]

	let g:vimwiki_valid_html_tags = 'script,code,img,div'
	let g:vimwiki_list = [ {'path': '~/git/mywiki/content/',
		\'index':'_index',
		\'ext':'md',
		\'syntax':'markdown'},
		\{'path':'~/git/0xf61.gitlab.io/content/',
		\'ext':'md',
		\'index':'_index',
		\'syntax':'markdown'}]
	autocmd FileType vimwiki set syntax=markdown

	if !empty(expand(glob("~/.vim/autoload/coc-settings.vim")))
		source ~/.vim/autoload/coc-settings.vim
	endif

	let g:go_fmt_fail_silently = 0 " let me out even with errors
	let g:go_fmt_command = 'goimports' " autoupdate import
	let g:go_fmt_autosave = 1
else
	autocmd vimleavepre *.go !gofmt -w % " backup if fatih fails
endif

" enable omni-completion
set omnifunc=syntaxcomplete#Complete

" Trailing Spaces are toxic/waste
augroup prewrites
	autocmd!
		autocmd BufWritePre,FileWritePre * :%s/\s\+$//e | %s/\r$//e
augroup END

" start at last place you were editing
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" pane switching vi style (duh)
map <C-h> <C-W>h
map <C-j> <C-W>j
map <C-k> <C-W>k
map <C-l> <C-W>l
